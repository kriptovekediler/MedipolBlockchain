"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var mongodb_1 = require("mongodb");
var ava_1 = require("ava");
var src_1 = require("../src");
var Post = (function (_super) {
    __extends(Post, _super);
    function Post(data) {
        var _this = _super.call(this, data) || this;
        _this.defineObjectIdType();
        _this.defineIdFields();
        _this.defineDeletedAtField();
        _this.defineCourseIdField();
        _this.defineUserIdField();
        _this.definePostIdField();
        _this.defineMessageField();
        _this.defineCreatedAtField();
        _this.defineAuthorField();
        _this.defineAnswersField();
        _this.populate(data);
        return _this;
    }
    Post.prototype.defineObjectIdType = function () {
        this.defineType('ObjectId', function (v) {
            return mongodb_1.ObjectId.isValid(v) ? new mongodb_1.ObjectId(v) : null;
        });
    };
    Post.prototype.defineIdFields = function () {
        var _this = this;
        this.defineField('_id', {
            type: 'ObjectId'
        });
        this.defineField('id', {
            type: 'ObjectId',
            serializable: ['out-admin', 'out-profile'],
            get: function () { return _this._id; },
            set: function (v) { return _this._id = v; }
        });
    };
    Post.prototype.defineDeletedAtField = function () {
        this.defineField('_deletedAt', {
            type: 'Date',
            serializable: ['in-db']
        });
    };
    Post.prototype.defineCourseIdField = function () {
        this.defineField('courseId', {
            type: 'ObjectId',
            serializable: ['in-db', 'out-admin', 'out-profile'],
            validate: [
                {
                    validator: 'presence',
                    code: 42217
                },
            ],
            fakeValue: function () { return new mongodb_1.ObjectId(); }
        });
    };
    Post.prototype.defineUserIdField = function () {
        this.defineField('userId', {
            type: 'ObjectId',
            serializable: ['in-db', 'out-admin', 'out-profile'],
            validate: [
                {
                    validator: 'presence',
                    code: 42218
                },
            ],
            fakeValue: function () { return new mongodb_1.ObjectId(); }
        });
    };
    Post.prototype.definePostIdField = function () {
        var _this = this;
        this.defineField('postId', {
            type: 'ObjectId',
            populatable: ['in-admin'],
            serializable: ['in-db', 'out-admin', 'out-profile'],
            validate: [
                {
                    validator: 'parentPostIdValidity',
                    code: 42216,
                    condition: function () { return !!_this.postId; }
                },
            ]
        });
    };
    Post.prototype.defineMessageField = function () {
        this.defineField('message', {
            type: 'String',
            populatable: ['in-admin', 'in-profile'],
            serializable: ['in-db', 'out-admin', 'out-profile'],
            validate: [
                {
                    validator: 'presence',
                    code: 42219
                },
            ]
        });
    };
    Post.prototype.defineCreatedAtField = function () {
        this.defineField('createdAt', {
            type: 'Date',
            serializable: ['in-db', 'out-admin', 'out-profile'],
            defaultValue: function () { return new Date(); }
        });
    };
    Post.prototype.defineAuthorField = function () {
        this.defineField('author', {
            type: Author,
            serializable: ['out-admin', 'out-profile']
        });
    };
    Post.prototype.defineAnswersField = function () {
        this.defineField('answers', {
            type: [Post],
            serializable: ['out-admin', 'out-profile'],
            defaultValue: []
        });
    };
    return Post;
}(src_1.Model));
exports.Post = Post;
var Author = (function (_super) {
    __extends(Author, _super);
    function Author(data) {
        var _this = _super.call(this, data) || this;
        _this.defineFirstNameFields();
        _this.defineLastNameField();
        _this.defineRoleField();
        _this.populate(data);
        return _this;
    }
    Author.prototype.defineFirstNameFields = function () {
        this.defineField('firstName', {
            type: 'String',
            serializable: ['out-admin', 'out-profile']
        });
    };
    Author.prototype.defineLastNameField = function () {
        this.defineField('lastName', {
            type: 'String',
            serializable: ['out-admin', 'out-profile']
        });
    };
    Author.prototype.defineRoleField = function () {
        this.defineField('role', {
            type: 'Integer',
            serializable: ['out-admin', 'out-profile'],
            defaultValue: false,
            get: function () { return 3; }
        });
    };
    return Author;
}(src_1.Model));
exports.Author = Author;
ava_1["default"]('method `populate` deeply assignes data - stages', function (t) {
    console.time('POSTS');
    var posts = [];
    var i = 0;
    while (i < 100) {
        posts.push(new Post({
            courseId: new mongodb_1.ObjectId(),
            userId: new mongodb_1.ObjectId(),
            postId: null,
            message: 'test' + i,
            author: new Author({ firstName: 'Test', lastName: 'User' }),
            answers: []
        }));
        i++;
    }
    console.timeEnd('POSTS');
    console.time('ANSWERS');
    var j = 0;
    var answers = [];
    while (j < 50) {
        answers.push(new Post({
            courseId: new mongodb_1.ObjectId(),
            userId: new mongodb_1.ObjectId(),
            postId: new mongodb_1.ObjectId(),
            message: 'answer' + j,
            author: new Author({ firstName: 'Test', lastName: 'User' }),
            answers: []
        }));
        j++;
    }
    console.timeEnd('ANSWERS');
    console.time('POPULATE');
    posts.forEach(function (x) { return x.populate({ answers: answers }); });
    console.timeEnd('POPULATE');
    t.is(posts.length, 100);
});
ava_1["default"]('method `populate` deeply assignes data -- all at once', function (t) {
    console.time('ATONCE');
    var posts = [];
    var i = 0;
    var j = 0;
    var answers = [];
    while (j < 50) {
        answers.push(new Post({
            courseId: new mongodb_1.ObjectId(),
            userId: new mongodb_1.ObjectId(),
            postId: new mongodb_1.ObjectId(),
            message: 'answer' + j,
            author: new Author({ firstName: 'Test', lastName: 'User' }),
            answers: []
        }));
        j++;
    }
    while (i < 100) {
        posts.push(new Post({
            courseId: new mongodb_1.ObjectId(),
            userId: new mongodb_1.ObjectId(),
            postId: null,
            message: 'test' + i,
            author: new Author({ firstName: 'Test', lastName: 'User' }),
            answers: answers
        }));
        i++;
    }
    console.timeEnd('ATONCE');
    t.is(posts.length, 100);
});
//# sourceMappingURL=performance.js.map